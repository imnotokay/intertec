Ù
rC:\Users\Alex Castillo\source\repos\IntertecCounterChallenge\IntertecCounterChallenge\Constants\ConstantsValues.cs
	namespace 	$
IntertecCounterChallenge
 "
." #
	Constants# ,
{ 
public 

static 
class 
ConstantsValues '
{ 
public 
const 
char 
WordSeparator '
=( )
$char* -
;- .
public 
const 
string 
SpecialCharacters -
=. /
$str0 >
;> ?
} 
} ˇI
mC:\Users\Alex Castillo\source\repos\IntertecCounterChallenge\IntertecCounterChallenge\Model\SentenceParser.cs
	namespace 	$
IntertecCounterChallenge
 "
." #
Model# (
{ 
public		 

class		 
SentenceParser		 
{

 
private 
readonly 
Regex "
specialCharactersRegex 5
;5 6
public 
SentenceParser 
( 
) 
{ 	"
specialCharactersRegex "
=# $
new% (
Regex) .
(. /
ConstantsValues/ >
.> ?
SpecialCharacters? P
)P Q
;Q R
} 	
public 
string 

WordParser  
(  !
string! '
input( -
)- .
{ 	
string 
[ 
] 
	wordParts 
=  
input! &
.& '
Split' ,
(, -
ConstantsValues- <
.< =
WordSeparator= J
)J K
;K L
StringBuilder 
parsedSentence (
=) *
new+ .
StringBuilder/ <
(< =
)= >
;> ?
string   

parsedWord   
=   
string    &
.  & '
Empty  ' ,
;  , -
char!! 
[!! 
]!! 
letters!! 
;!! 
foreach$$ 
($$ 
string$$ 
part$$  
in$$! #
	wordParts$$$ -
)$$- .
{%% 
if&& 
(&& 
part&& 
.&& 
Length&& 
==&&  "
$num&&# $
||&&% '
part&&( ,
.&&, -
Length&&- 3
==&&4 6
$num&&7 8
)&&8 9
{'' 

parsedWord)) 
=))  
part))! %
;))% &
}** 
else++ 
if++ 
(++ "
specialCharactersRegex++ /
.++/ 0
IsMatch++0 7
(++7 8
part++8 <
)++< =
)++= >
{,, 

parsedWord.. 
=..  '
ParseWordBySpecialCharacter..! <
(..< =
part..= A
)..A B
;..B C
}// 
else00 
{11 
letters33 
=33 
part33 "
.33" #
Take33# '
(33' (
part33( ,
.33, -
Length33- 3
-334 5
$num336 7
)337 8
.338 9
Skip339 =
(33= >
$num33> ?
)33? @
.33@ A
ToArray33A H
(33H I
)33I J
;33J K

parsedWord44 
=44  
string44! '
.44' (
Concat44( .
(44. /
part44/ 3
[443 4
$num444 5
]445 6
.446 7
ToString447 ?
(44? @
)44@ A
,44A B
DistinctLetters44C R
(44R S
letters44S Z
)44Z [
,44[ \
part44] a
[44a b
part44b f
.44f g
Length44g m
-44n o
$num44p q
]44q r
)44r s
;44s t
}55 
parsedSentence77 
.77 
Append77 %
(77% &
string77& ,
.77, -
Concat77- 3
(773 4

parsedWord774 >
,77> ?
$str77@ C
)77C D
)77D E
;77E F
}88 
return;; 
parsedSentence;; !
.;;! "
ToString;;" *
(;;* +
);;+ ,
.;;, -
Trim;;- 1
(;;1 2
);;2 3
;;;3 4
}<< 	
publicCC 
stringCC '
ParseWordBySpecialCharacterCC 1
(CC1 2
stringCC2 8
wordCC9 =
)CC= >
{DD 	
charFF 
specialCharacterFF !
=FF" #
charFF$ (
.FF( )
MinValueFF) 1
;FF1 2
stringGG 
outputGG 
=GG 
stringGG "
.GG" #
EmptyGG# (
;GG( )
boolHH !
foundSpecialCharacterHH &
=HH' (
falseHH) .
;HH. /
intII 
posII 
=II 
$numII 
;II 
charJJ 
[JJ 
]JJ 
lettersJJ 
;JJ 
stringKK 
[KK 
]KK 
wordsKK 
;KK 
boolLL 
isFirstLL 
=LL 
trueLL 
;LL  
whileOO 
(OO 
!OO !
foundSpecialCharacterOO )
)OO) *
{PP 
ifQQ 
(QQ "
specialCharactersRegexQQ *
.QQ* +
IsMatchQQ+ 2
(QQ2 3
wordQQ3 7
[QQ7 8
posQQ8 ;
]QQ; <
.QQ< =
ToStringQQ= E
(QQE F
)QQF G
)QQG H
)QQH I
{RR !
foundSpecialCharacterTT )
=TT* +
trueTT, 0
;TT0 1
specialCharacterUU $
=UU% &
wordUU' +
[UU+ ,
posUU, /
]UU/ 0
;UU0 1
}VV 
posWW 
++WW 
;WW 
}XX 
wordsZZ 
=ZZ 
wordZZ 
.ZZ 
SplitZZ 
(ZZ 
newZZ "
charZZ# '
[ZZ' (
]ZZ( )
{ZZ* +
specialCharacterZZ, <
}ZZ= >
,ZZ> ?
$numZZ@ A
)ZZA B
;ZZB C
foreach\\ 
(\\ 
string\\ 
tmpWord\\ #
in\\$ &
words\\' ,
)\\, -
{]] 
if^^ 
(^^ "
specialCharactersRegex^^ *
.^^* +
IsMatch^^+ 2
(^^2 3
tmpWord^^3 :
)^^: ;
)^^; <
{__ 
outputaa 
+=aa '
ParseWordBySpecialCharacteraa 9
(aa9 :
tmpWordaa: A
)aaA B
;aaB C
}bb 
elsecc 
{dd 
ifee 
(ee 
tmpWordee 
.ee  
Lengthee  &
==ee' )
$numee* +
||ee, .
tmpWordee/ 6
.ee6 7
Lengthee7 =
==ee> @
$numeeA B
)eeB C
{ff 
outputhh 
+=hh !
tmpWordhh" )
;hh) *
}ii 
elsejj 
{kk 
lettersmm 
=mm  !
tmpWordmm" )
.mm) *
Takemm* .
(mm. /
tmpWordmm/ 6
.mm6 7
Lengthmm7 =
-mm> ?
$nummm@ A
)mmA B
.mmB C
SkipmmC G
(mmG H
$nummmH I
)mmI J
.mmJ K
ToArraymmK R
(mmR S
)mmS T
;mmT U
outputnn 
+=nn !
stringnn" (
.nn( )
Concatnn) /
(nn/ 0
tmpWordnn0 7
[nn7 8
$numnn8 9
]nn9 :
.nn: ;
ToStringnn; C
(nnC D
)nnD E
,nnE F
DistinctLettersnnG V
(nnV W
lettersnnW ^
)nn^ _
,nn_ `
tmpWordnna h
[nnh i
tmpWordnni p
.nnp q
Lengthnnq w
-nnx y
$numnnz {
]nn{ |
)nn| }
;nn} ~
}oo 
}pp 
ifrr 
(rr 
isFirstrr 
)rr 
{ss 
outputtt 
+=tt 
specialCharactertt .
.tt. /
ToStringtt/ 7
(tt7 8
)tt8 9
;tt9 :
isFirstuu 
=uu 
falseuu #
;uu# $
}vv 
}ww 
returnyy 
outputyy 
;yy 
}zz 	
public
ÅÅ 
string
ÅÅ 
DistinctLetters
ÅÅ %
(
ÅÅ% &
char
ÅÅ& *
[
ÅÅ* +
]
ÅÅ+ ,
letters
ÅÅ- 4
)
ÅÅ4 5
{
ÇÇ 	
string
ÑÑ 
output
ÑÑ 
=
ÑÑ 
string
ÑÑ "
.
ÑÑ" #
Empty
ÑÑ# (
;
ÑÑ( )
int
ÖÖ 
quantity
ÖÖ 
=
ÖÖ 
$num
ÖÖ 
;
ÖÖ 
List
ÜÜ 
<
ÜÜ 
char
ÜÜ 
>
ÜÜ 

tmpLetters
ÜÜ !
=
ÜÜ" #
new
ÜÜ$ '
List
ÜÜ( ,
<
ÜÜ, -
char
ÜÜ- 1
>
ÜÜ1 2
(
ÜÜ2 3
)
ÜÜ3 4
;
ÜÜ4 5
foreach
ââ 
(
ââ 
char
ââ 
letter
ââ  
in
ââ! #
letters
ââ$ +
)
ââ+ ,
{
ää 
if
åå 
(
åå 

tmpLetters
åå 
.
åå 
	FindIndex
åå (
(
åå( )
x
åå) *
=>
åå+ -
x
åå. /
==
åå0 2
letter
åå3 9
)
åå9 :
==
åå; =
-
åå> ?
$num
åå? @
)
åå@ A
{
çç 

tmpLetters
èè 
.
èè 
Add
èè "
(
èè" #
letter
èè# )
)
èè) *
;
èè* +
quantity
êê 
++
êê 
;
êê 
}
ëë 
}
íí 
output
ïï 
=
ïï 
quantity
ïï 
.
ïï 
ToString
ïï &
(
ïï& '
)
ïï' (
;
ïï( )
return
òò 
output
òò 
;
òò 
}
ôô 	
}
öö 
}õõ –
`C:\Users\Alex Castillo\source\repos\IntertecCounterChallenge\IntertecCounterChallenge\Program.cs
	namespace		 	$
IntertecCounterChallenge		
 "
{

 
[ #
ExcludeFromCodeCoverage 
] 
class 	
Program
 
{ 
	protected 
Program 
( 
) 
{ 	
} 	
static 
void 
Main 
( 
string 
[  
]  !
args" &
)& '
{ 	
SentenceParser 
sentenceParser )
=* +
new, /
SentenceParser0 >
(> ?
)? @
;@ A
foreach 
( 
string 
arg 
in !
args" &
)& '
{ 
Console 
. 
Write 
( 
string $
.$ %
Concat% +
(+ ,
arg, /
,/ 0
$str1 4
)4 5
)5 6
;6 7
} 
Console 
. 
	WriteLine 
( 
$str  
)  !
;! "
while   
(   
true   
)   
{!! 
string## 

inputValue## !
=##" #
Console##$ +
.##+ ,
ReadLine##, 4
(##4 5
)##5 6
;##6 7
if$$ 
($$ 

inputValue$$ 
==$$ !
$str$$" (
)$$( )
break%% 
;%% 
string&& 
outputValue&& "
=&&# $
sentenceParser&&% 3
.&&3 4

WordParser&&4 >
(&&> ?

inputValue&&? I
)&&I J
;&&J K
Console'' 
.'' 
	WriteLine'' !
(''! "
outputValue''" -
)''- .
;''. /
}(( 
})) 	
}** 
}++ õ
pC:\Users\Alex Castillo\source\repos\IntertecCounterChallenge\IntertecCounterChallenge\Properties\AssemblyInfo.cs
[ 
assembly 	
:	 

AssemblyTitle 
( 
$str 3
)3 4
]4 5
[		 
assembly		 	
:			 

AssemblyDescription		 
(		 
$str		 !
)		! "
]		" #
[

 
assembly

 	
:

	 
!
AssemblyConfiguration

  
(

  !
$str

! #
)

# $
]

$ %
[ 
assembly 	
:	 

AssemblyCompany 
( 
$str 
) 
] 
[ 
assembly 	
:	 

AssemblyProduct 
( 
$str 5
)5 6
]6 7
[ 
assembly 	
:	 

AssemblyCopyright 
( 
$str 0
)0 1
]1 2
[ 
assembly 	
:	 

AssemblyTrademark 
( 
$str 
)  
]  !
[ 
assembly 	
:	 

AssemblyCulture 
( 
$str 
) 
] 
[ 
assembly 	
:	 


ComVisible 
( 
false 
) 
] 
[ 
assembly 	
:	 

Guid 
( 
$str 6
)6 7
]7 8
[## 
assembly## 	
:##	 

AssemblyVersion## 
(## 
$str## $
)##$ %
]##% &
[$$ 
assembly$$ 	
:$$	 

AssemblyFileVersion$$ 
($$ 
$str$$ (
)$$( )
]$$) *